"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[7063],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>d});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(o),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return o?n.createElement(f,i(i({ref:t},p),{},{components:o})):n.createElement(f,i({ref:t},p))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=o[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9454:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=o(7462),r=(o(7294),o(3905));const a={},i="Tempo",c={unversionedId:"configuration/connecting-to-data-stores/tempo",id:"configuration/connecting-to-data-stores/tempo",title:"Tempo",description:"If you want to use Tempo as the trace data store, you can configure Tracetest to fetch trace data from Tempo.",source:"@site/docs/configuration/connecting-to-data-stores/tempo.md",sourceDirName:"configuration/connecting-to-data-stores",slug:"/configuration/connecting-to-data-stores/tempo",permalink:"/configuration/connecting-to-data-stores/tempo",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/connecting-to-data-stores/tempo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SignalFx",permalink:"/configuration/connecting-to-data-stores/signalfx"},next:{title:"Lightstep",permalink:"/configuration/connecting-to-data-stores/lightstep"}},s={},l=[{value:"Configure OpenTelemetry Collector to Send Traces to Tempo",id:"configure-opentelemetry-collector-to-send-traces-to-tempo",level:2},{value:"Configure Tracetest to Use Tempo as a Trace Data Store",id:"configure-tracetest-to-use-tempo-as-a-trace-data-store",level:2},{value:"Configure Tracetest to Use Tempo as a Trace Data Store",id:"configure-tracetest-to-use-tempo-as-a-trace-data-store-1",level:2},{value:"Web UI",id:"web-ui",level:3},{value:"CLI",id:"cli",level:3}],p={toc:l};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tempo"},"Tempo"),(0,r.kt)("p",null,"If you want to use Tempo as the trace data store, you can configure Tracetest to fetch trace data from Tempo."),(0,r.kt)("p",null,"You'll configure the OpenTelemetry Collector to receive traces from your system and then send them to Tempo. And, you don't have to change your existing pipelines to do so."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Examples of configuring Tracetest can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},(0,r.kt)("inlineCode",{parentName:"a"},"examples")," folder of the Tracetest GitHub repo"),". ")),(0,r.kt)("h2",{id:"configure-opentelemetry-collector-to-send-traces-to-tempo"},"Configure OpenTelemetry Collector to Send Traces to Tempo"),(0,r.kt)("p",null,"In your OpenTelemetry Collector config file, make sure to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"tempo"),", with the ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to your Tempo's instance on port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317"),". If you are running Tracetest with Docker, the endpoint might look like this ",(0,r.kt)("inlineCode",{parentName:"p"},"http://tempo:4317"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\n\n# If you already have receivers declared, you can just ignore\n# this one and still use yours instead.\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  otlp/2:\n    endpoint: tempo:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    # your probably already have a traces pipeline, you don't have to change it.\n    # just add this one to your configuration. Just make sure to not have two\n    # pipelines with the same name\n    traces/1:\n      receivers: [otlp] # your receiver\n      processors: [batch] # make sure to have the probabilistic_sampler before your batch processor\n      exporters: [otlp/2] # your exporter pointing to your Tempo instance\n\n")),(0,r.kt)("h2",{id:"configure-tracetest-to-use-tempo-as-a-trace-data-store"},"Configure Tracetest to Use Tempo as a Trace Data Store"),(0,r.kt)("p",null,"First, configure Tempo to run on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9095"),". Here is an example config file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# tempo.config.yaml\n\nauth_enabled: false\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9095\ndistributor:\n  receivers:                           # This configuration will listen on all ports and protocols that Tempo is capable of.\n    jaeger:                            # the receives all come from the OpenTelemetry collector.  more configuration information can\n      protocols:                       # be found here: https://github.com/open-telemetry/opentelemetry-collector/tree/master/receiver.\n        thrift_http:                   #\n        grpc:                          # For a production deployment you should only enable the receivers you need!\n        thrift_binary:\n        thrift_compact:\n    zipkin:\n    otlp:\n      protocols:\n        http:\n        grpc:\n    opencensus:\ningester:\n  trace_idle_period: 10s               # The length of time after a trace has not received spans to consider it complete and flush it.\n  max_block_bytes: 1_000_000           # Cut the head block when it hits this size or ...\n  #traces_per_block: 1_000_000\n  max_block_duration: 5m               #   this much time passes.\ncompactor:\n  compaction:\n    compaction_window: 1h              # Blocks in this time window will be compacted together.\n    max_compaction_objects: 1000000    # Maximum size of compacted blocks.\n    block_retention: 1h\n    compacted_block_retention: 10m\nstorage:\n  trace:\n    backend: local                     # Backend configuration to use.\n    wal:\n      path: /tmp/tempo/wal            # Where to store the the wal locally.\n      #bloom_filter_false_positive: .05 # Bloom filter false positive rate.  Lower values create larger filters but fewer false positives.\n      #index_downsample: 10             # Number of traces per index record.\n    local:\n      path: /tmp/tempo/blocks\n    pool:\n      max_workers: 100                 # The worker pool mainly drives querying, but is also used for polling the blocklist.\n      queue_depth: 10000\n\n")),(0,r.kt)("h2",{id:"configure-tracetest-to-use-tempo-as-a-trace-data-store-1"},"Configure Tracetest to Use Tempo as a Trace Data Store"),(0,r.kt)("p",null,"You also have to configure your Tracetest instance to make it aware that it has to fetch trace data from Tempo. "),(0,r.kt)("p",null,"Make sure you know what your Tempo endpoint for fetching traces is. In the screenshot below, the endpoint is ",(0,r.kt)("inlineCode",{parentName:"p"},"tempo:9095"),"."),(0,r.kt)("h3",{id:"web-ui"},"Web UI"),(0,r.kt)("p",null,"In the Web UI, open settings, and select Tempo."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1674644545/Blogposts/Docs/screely-1674644541618_ly8ur3.png",alt:null})),(0,r.kt)("h3",{id:"cli"},"CLI"),(0,r.kt)("p",null,"Or, if you prefer using the CLI, you can use this file config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Grafana Tempo\n  type: tempo\n  isDefault: true\n  tempo:\n    endpoint: tempo:9095\n    tls:\n      insecure: true\n")),(0,r.kt)("p",null,"Proceed to run this command in the terminal, and specify the file above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest datastore apply -f my/data-store/file/location.yaml\n")))}u.isMDXComponent=!0}}]);