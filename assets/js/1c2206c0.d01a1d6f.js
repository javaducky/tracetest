"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1976],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,h=d["".concat(c,".").concat(g)]||d[g]||u[g]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={},i="Lightstep",s={unversionedId:"configuration/connecting-to-data-stores/lightstep",id:"configuration/connecting-to-data-stores/lightstep",title:"Lightstep",description:"If you want to use Lightstep as the trace data store, you'll configure the OpenTelemetry Collector to receive traces from your system and then send them to both Tracetest and Lightstep. And, you don't have to change your existing pipelines to do so.",source:"@site/docs/configuration/connecting-to-data-stores/lightstep.md",sourceDirName:"configuration/connecting-to-data-stores",slug:"/configuration/connecting-to-data-stores/lightstep",permalink:"/configuration/connecting-to-data-stores/lightstep",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/connecting-to-data-stores/lightstep.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tempo",permalink:"/configuration/connecting-to-data-stores/tempo"},next:{title:"New Relic",permalink:"/configuration/connecting-to-data-stores/new-relic"}},c={},l=[{value:"Configuring OpenTelemetry Collector to Send Traces to both Lightstep and Tracetest",id:"configuring-opentelemetry-collector-to-send-traces-to-both-lightstep-and-tracetest",level:2},{value:"Configure Tracetest to Use Lightstep as a Trace Data Store",id:"configure-tracetest-to-use-lightstep-as-a-trace-data-store",level:3},{value:"Web UI",id:"web-ui",level:3},{value:"CLI",id:"cli",level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lightstep"},"Lightstep"),(0,r.kt)("p",null,"If you want to use ",(0,r.kt)("a",{parentName:"p",href:"https://lightstep.com/"},"Lightstep")," as the trace data store, you'll configure the OpenTelemetry Collector to receive traces from your system and then send them to both Tracetest and Lightstep. And, you don't have to change your existing pipelines to do so."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Examples of configuring Tracetest with Lightstep can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},(0,r.kt)("inlineCode",{parentName:"a"},"examples")," folder of the Tracetest GitHub repo"),". ")),(0,r.kt)("h2",{id:"configuring-opentelemetry-collector-to-send-traces-to-both-lightstep-and-tracetest"},"Configuring OpenTelemetry Collector to Send Traces to both Lightstep and Tracetest"),(0,r.kt)("p",null,"In your OpenTelemetry Collector config file, make sure to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"otlp/tt"),", with the ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to your Tracetest instance on port ",(0,r.kt)("inlineCode",{parentName:"p"},"21321"),". If you are running Tracetest with Docker, the endpoint might look like this ",(0,r.kt)("inlineCode",{parentName:"p"},"http://tracetest:21321"),"."),(0,r.kt)("p",null,"Additionally, set another ",(0,r.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"otlp/ls"),", with the ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to your Lightstep account. Set the endpoint to the Lightstep ingest API and add your Lightstep access token as a header."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# collector.config.yaml\n\n# If you already have receivers declared, you can just ignore\n# this one and still use yours instead.\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    logLevel: debug\n  # OTLP for Tracetest\n  otlp/tt:\n    endpoint: tracetest:21321 # Send traces to Tracetest. Read more in docs here:  https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n  # OTLP for Lightstep\n  otlp/ls:\n    endpoint: ingest.lightstep.com:443\n    headers:\n      "lightstep-access-token": "<lightstep_access_token>" # Send traces to Lightstep. Read more in docs here: https://docs.lightstep.com/otel/otel-quick-start \n\nservice:\n  pipelines:\n    # Your probably already have a traces pipeline, you don\'t have to change it.\n    # Add these two to your configuration. Just make sure to not have two\n    # pipelines with the same name\n    traces/tt:\n      receivers: [otlp] # your receiver\n      processors: [batch]\n      exporters: [otlp/tt] # your exporter pointing to your tracetest instance\n    traces/ls:\n      receivers: [otlp]  # your receiver\n      processors: [batch]\n      exporters: [logging, otlp/ls] # your exporter pointing to your lighstep account\n')),(0,r.kt)("h3",{id:"configure-tracetest-to-use-lightstep-as-a-trace-data-store"},"Configure Tracetest to Use Lightstep as a Trace Data Store"),(0,r.kt)("p",null,"You also have to configure your Tracetest instance to expose an ",(0,r.kt)("inlineCode",{parentName:"p"},"otlp")," endpoint to make it aware it will receive traces from the OpenTelemetry Collector."),(0,r.kt)("h3",{id:"web-ui"},"Web UI"),(0,r.kt)("p",null,"In the Web UI, open settings, and select Lightstep."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1674643396/Blogposts/Docs/screely-1674643391899_w6k22s.png",alt:null})),(0,r.kt)("h3",{id:"cli"},"CLI"),(0,r.kt)("p",null,"Or, if you prefer using the CLI, you can use this file config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Opentelemetry Collector pipeline\n  type: otlp\n  isDefault: true\n")),(0,r.kt)("p",null,"Proceed to run this command in the terminal, and specify the file above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest datastore apply -f my/data-store/file/location.yaml\n")))}u.isMDXComponent=!0}}]);