"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9353],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1428:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},l="Deployment Overview",c={unversionedId:"deployment/overview",id:"deployment/overview",title:"Deployment Overview",description:"This section contains a general overview of deploying a Tracetest in production. You can find platform-specific guides for:",source:"@site/docs/deployment/overview.md",sourceDirName:"deployment",slug:"/deployment/overview",permalink:"/deployment/overview",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/deployment/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"New Relic",permalink:"/configuration/connecting-to-data-stores/new-relic"},next:{title:"Docker Deployment",permalink:"/deployment/docker"}},i={},s=[],p={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deployment-overview"},"Deployment Overview"),(0,o.kt)("p",null,"This section contains a general overview of deploying a Tracetest in production. You can find platform-specific guides for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./docker"},"Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./kubernetes"},"Kubernetes"))),(0,o.kt)("p",null,"As shown in the diagram below, a typical production Tracetest deployment consists of Postgres, an OpenTelemetry Colletor and a ",(0,o.kt)("a",{parentName:"p",href:"../configuration/overview"},"trace data store"),". But, if you do not want to use a trace data store, you can rely entirely on OpenTelemetry Collector."),(0,o.kt)("mermaid",{value:'flowchart TD\n    A(("Tracetest"))\n    B[(Postgres)]\n    C(OpenTelemetry Collector)\n    D("Trace data store (optional)")\n\n\n    A <--\x3e |Tracetest stores test run data in Postgres| B\n    C --\x3e |OTel Collector sends traces to the trace data store| D\n    D --\x3e |Tracetest fetches traces to enrich e2e and integration tests| A\n\n    classDef tracetest fill:#61175e,stroke:#61175e,stroke-width:4px,color:#ffffff;\n\n    class A tracetest'}),(0,o.kt)("p",null,"Postgres stores all Tracetest-related data."),(0,o.kt)("p",null,"OpenTelemetry Collector ingests traces from your distributed system and forwards them to a trace data store."),(0,o.kt)("p",null,"A trace data store is used to store traces. Tracetest will fetch trace data from the trace data store when running tests."),(0,o.kt)("p",null,"Tracetest can be configured via a configuration file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# tracetest.config.yaml\n\npostgresConnString: "host=postgres user=postgres password=postgres port=5432 sslmode=disable"\n\npoolingConfig:\n  maxWaitTimeForTrace: 10m\n  retryDelay: 5s\n\ngoogleAnalytics:\n  enabled: true\n\ndemo:\n  enabled: []\n\nexperimentalFeatures: []\n\ntelemetry:\n  dataStores:\n    jaeger:\n      type: jaeger\n      jaeger:\n        endpoint: jaeger:16685\n        tls:\n          insecure: true\n\n  exporters:\n    collector:\n      serviceName: tracetest\n      sampling: 100 # 100%\n      exporter:\n        type: collector\n        collector:\n          endpoint: otel-collector:4317\n\nserver:\n  telemetry:\n    dataStore: jaeger\n    exporter: collector\n    applicationExporter: collector\n')),(0,o.kt)("p",null,"Read more in the ",(0,o.kt)("a",{parentName:"p",href:"/configuration/overview"},"configuration docs"),"."),(0,o.kt)("p",null,"Or, continue reading to see how to run Tracetest in production with ",(0,o.kt)("a",{parentName:"p",href:"./docker"},"Docker")," or ",(0,o.kt)("a",{parentName:"p",href:"./kubernetes"},"Kubernetes"),"."))}u.isMDXComponent=!0}}]);