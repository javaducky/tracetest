"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[3932],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=i(n),u=o,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={},l="Running Tracetest with Tempo",p={unversionedId:"examples-tutorials/recipes/running-tracetest-with-tempo",id:"examples-tutorials/recipes/running-tracetest-with-tempo",title:"Running Tracetest with Tempo",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-tempo.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-tempo",permalink:"/examples-tutorials/recipes/running-tracetest-with-tempo",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-tempo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Running Tracetest with OpenSearch",permalink:"/examples-tutorials/recipes/running-tracetest-with-opensearch"},next:{title:"Running Tracetest With Lightstep",permalink:"/examples-tutorials/recipes/running-tracetest-with-lightstep"}},s={},i=[{value:"Sample Node.js app with Tempo, OpenTelemetry and Tracetest",id:"sample-nodejs-app-with-tempo-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Node.js app",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js app",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run both the Node.js app and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn more",id:"learn-more",level:2}],c={toc:i};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-tracetest-with-tempo"},"Running Tracetest with Tempo"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-tempo-nodejs"},"Check out the source code on GitHub here.")," ")),(0,o.kt)("h2",{id:"sample-nodejs-app-with-tempo-opentelemetry-and-tracetest"},"Sample Node.js app with Tempo, OpenTelemetry and Tracetest"),(0,o.kt)("p",null,"This is a simple quick start on how to configure a Node.js app to use OpenTelemetry instrumentation with traces and Tracetest for enhancing your e2e and integration tests with trace-based testing. The infrastructure will use Tempo as the trace data store, and OpenTelemetry Collector to receive traces from the Node.js app and send them to Tempo."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You will need ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,o.kt)("h2",{id:"project-structure"},"Project Structure"),(0,o.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,o.kt)("h3",{id:"1-nodejs-app"},"1. Node.js app"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,o.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,o.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest, Tempo, and the OpenTelemetry Collector."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest."),(0,o.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo:4317")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo")," service, where the port ",(0,o.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tempo accepts traces. And, ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo:9095")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," will map to the ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo")," service and port ",(0,o.kt)("inlineCode",{parentName:"p"},"9095")," where Tracetest will fetch trace data from Tempo."),(0,o.kt)("h2",{id:"nodejs-app"},"Node.js app"),(0,o.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,o.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files, respectively.\nTraces will be sent to the OpenTelemetry Collector."),(0,o.kt)("p",null,"Here's the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({ url: 'http://otel-collector:4317' }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\nsdk.start()\n")),(0,o.kt)("p",null,"Depending on which of these you choose, traces will be sent to either the ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," endpoint."),(0,o.kt)("p",null,"The hostnames and ports for these are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"GRPC: ",(0,o.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4317")),(0,o.kt)("li",{parentName:"ul"},"HTTP: ",(0,o.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4318/v1/traces"))),(0,o.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,o.kt)("p",null,"To start the server, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,o.kt)("p",null,"As you can see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,o.kt)("p",null,"And, the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains just one service for the Node.js app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\nservices:\n  app:\n    image: quick-start-nodejs\n    build: .\n    ports:\n      - \"8080:8080\"\n")),(0,o.kt)("p",null,"To start it, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,o.kt)("p",null,"This will start the Node.js app. But, you're not sending the traces anywhere."),(0,o.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector."),(0,o.kt)("h2",{id:"tracetest"},"Tracetest"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with four services."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,o.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://grafana.com/oss/tempo/"},(0,o.kt)("strong",{parentName:"a"},"Tempo"))," - Grafana Tempo is an open source, easy-to-use, and high-scale distributed tracing backend."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,o.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\nservices:\n\n  tracetest:\n    image: kubeshop/tracetest\n    platform: linux/amd64\n    volumes:\n      - ./tracetest/tracetest.config.yaml:/app/config.yaml\n    ports:\n      - 11633:11633\n    depends_on:\n      postgres:\n        condition: service_healthy\n      tempo:\n        condition: service_started\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n    depends_on:\n      - tempo\n\n  tempo:\n    image: grafana/tempo:1.5.0\n    command: ["-config.file=/etc/tempo.yaml"]\n    volumes:\n    - ./tracetest/tempo.config.yaml:/etc/tempo.yaml\n\n')),(0,o.kt)("p",null,"Tracetest depends on Postgres, Tempo and the OpenTelemetry Collector. All three services require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why?")," To start both the Node.js app and Tracetest, we will run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo.config.yaml")," file contains the initial config for running Tempo."),(0,o.kt)("p",null,"The key takeaway is the server block."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"#...\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9095\n#...\n")),(0,o.kt)("p",null,"We'll use this below."),(0,o.kt)("p",null,"Check out the full Tempo config for reference."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"auth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9095\n\ndistributor:\n  receivers:                           # this configuration will listen on all ports and protocols that tempo is capable of.\n    jaeger:                            # the receives all come from the OpenTelemetry collector.  more configuration information can\n      protocols:                       # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/master/receiver\n        thrift_http:                   #\n        grpc:                          # for a production deployment you should only enable the receivers you need!\n        thrift_binary:\n        thrift_compact:\n    zipkin:\n    otlp:\n      protocols:\n        http:\n        grpc:\n    opencensus:\n\ningester:\n  trace_idle_period: 10s               # the length of time after a trace has not received spans to consider it complete and flush it\n  max_block_bytes: 1_000_000           # cut the head block when it hits this size or ...\n  #traces_per_block: 1_000_000\n  max_block_duration: 5m               #   this much time passes\n\ncompactor:\n  compaction:\n    compaction_window: 1h              # blocks in this time window will be compacted together\n    max_compaction_objects: 1000000    # maximum size of compacted blocks\n    block_retention: 1h\n    compacted_block_retention: 10m\n\nstorage:\n  trace:\n    backend: local                     # backend configuration to use\n    wal:\n      path: /tmp/tempo/wal            # where to store the the wal locally\n      #bloom_filter_false_positive: .05 # bloom filter false positive rate.  lower values create larger filters but fewer false positives\n      #index_downsample: 10             # number of traces per index record\n    local:\n      path: /tmp/tempo/blocks\n    pool:\n      max_workers: 100                 # the worker pool mainly drives querying, but is also used for polling the blocklist\n      queue_depth: 10000\n\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance, and defining the trace data store and exporter. The data store is set to Tempo, meaning the traces will be stored in Tempo and Tracetest will fetch them from Tempo when running tests. The exporter is set to the OpenTelemetry Collector."),(0,o.kt)("p",null,"But how does Tracetest fetch traces?"),(0,o.kt)("p",null,"Tracetest uses ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo.endpoint:tempo:9095")," to connect to Tempo and fetch trace data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# tracetest.config.yaml\n\npostgresConnString: "host=postgres user=postgres password=postgres port=5432 sslmode=disable"\n\npoolingConfig:\n  maxWaitTimeForTrace: 10m\n  retryDelay: 5s\n\ngoogleAnalytics:\n  enabled: true\n\ndemo:\n  enabled: []\n\nexperimentalFeatures: []\n\ntelemetry:\n  dataStores:\n    tempo:\n      type: tempo\n      tempo:\n        endpoint: tempo:9095\n        tls:\n          insecure: true\n\nserver:\n  telemetry:\n    dataStore: tempo\n    exporter: collector\n    applicationExporter: collector\n\n')),(0,o.kt)("p",null,"How do traces reach Tempo?"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Tempo's OTLP gRPC endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"tempo:4317"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/2:\n    endpoint: tempo:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/2]\n\n")),(0,o.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run both the Node.js app and Tracetest"),(0,o.kt)("p",null,"To start both the Node.js app and Tracetest, we will run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,o.kt)("p",null,"This will start your Tracetest instance on ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),". Go ahead and open it up."),(0,o.kt)("p",null,"Start creating tests! Make sure to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"http://app:8080/")," url in your test creation, because your Node.js app and Tracetest are in the same network."),(0,o.kt)("h2",{id:"learn-more"},"Learn more"),(0,o.kt)("p",null,"Feel free to check out our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub"),", and join our ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}m.isMDXComponent=!0}}]);