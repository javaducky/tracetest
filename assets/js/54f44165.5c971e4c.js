"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[152],{3441:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>y,default:()=>C,frontMatter:()=>T,metadata:()=>f,toc:()=>N});var n=a(7462),o=a(7294),r=a(3905),s=a(6010),l=a(2389),i=a(7392),c=a(7094),p=a(2466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:a,block:r,defaultValue:l,values:m,groupId:h,className:k}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),T=(0,i.l)(g,((e,t)=>e.value===t.value));if(T.length>0)throw new Error(`Docusaurus error: Duplicate values "${T.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===l?l:l??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,c.U)(),[N,w]=(0,o.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=f[h];null!=e&&e!==N&&g.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,a=C.indexOf(t),n=g[a].value;n!==N&&(x(t),w(n),null!=h&&v(h,String(n)))},D=e=>{var t;let a=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;a=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;a=C[t]??C[C.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},k)},g.map((e=>{let{value:t,label:a,attributes:r}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>C.push(e),onKeyDown:D,onClick:I},r,{className:(0,s.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===t})}),a??t)}))),a?(0,o.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function h(e){const t=(0,l.Z)();return o.createElement(m,(0,n.Z)({key:String(t)},e))}const k="tabItem_Ymn6";function b(e){let{children:t,hidden:a,className:n}=e;return o.createElement("div",{role:"tabpanel",className:(0,s.Z)(k,n),hidden:a},t)}var g=a(6823);const T={},y="Quick Start",f={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Quick Start",description:"This page showcases getting started with Tracetest by using the Tracetest CLI, Docker, or Kubernetes.",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started/installation",permalink:"/getting-started/installation",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/getting-started/installation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracetest Documentation",permalink:"/"},next:{title:"Detailed Instructions on Installing Tracetest Using the CLI",permalink:"/getting-started/detailed-installation"}},v={},N=[{value:"Install the Tracetest CLI",id:"install-the-tracetest-cli",level:2},{value:"Install the Tracetest server",id:"install-the-tracetest-server",level:2}],w={toc:N};function C(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},w,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"This page showcases getting started with Tracetest by using the Tracetest CLI, Docker, or Kubernetes."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You need to add ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/instrumentation/"},"OpenTelemetry instrumentation")," to your code and configure sending traces to a trace data store, or Tracetest directly, to benefit for Tracetest's trace-based testing.")),(0,r.kt)("h2",{id:"install-the-tracetest-cli"},"Install the Tracetest CLI"),(0,r.kt)(h,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(b,{value:"mac",label:"MAC",default:!0,mdxType:"TabItem"},(0,r.kt)(g.Z,{language:"bash",title:"Terminal",mdxType:"CodeBlock"},"brew install kubeshop/tracetest/tracetest")),(0,r.kt)(b,{value:"linux",label:"LINUX",mdxType:"TabItem"},(0,r.kt)(g.Z,{language:"bash",title:"Terminal",mdxType:"CodeBlock"},"curl -L https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash")),(0,r.kt)(b,{value:"win",label:"WINDOWS",mdxType:"TabItem"},(0,r.kt)(g.Z,{language:"bash",title:"Terminal",mdxType:"CodeBlock"},"choco source add --name=kubeshop_repo --source=https://chocolatey.kubeshop.io/chocolatey & choco install tracetest"))),(0,r.kt)("h2",{id:"install-the-tracetest-server"},"Install the Tracetest server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"tracetest server install\n")),(0,r.kt)(h,{groupId:"container-orchestrators",mdxType:"Tabs"},(0,r.kt)(b,{value:"docker-compose",label:"Docker Compose",default:!0,mdxType:"TabItem"},(0,r.kt)(g.Z,{language:"text",title:"Terminal",mdxType:"CodeBlock"},"How do you want to run TraceTest? [type to search]:\n> Using Docker Compose\n  Using Kubernetes"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Follow the prompts and continue with all the default settings.\nThis will generate an empty ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and a ",(0,r.kt)("inlineCode",{parentName:"p"},"./tracetest/")," directory that contains another ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," and two more config files. One for Tracetest and one for OpenTelemetry collector."),(0,r.kt)("p",{parentName:"admonition"},"To see the output of this command, view ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-jaeger"},"this sample setup")," from our GitHub examples.")),(0,r.kt)("p",null,"Start Docker Compose from the directory where you ran ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest server install"),"."),(0,r.kt)(g.Z,{language:"bash",title:"Terminal",mdxType:"CodeBlock"},"docker compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up -d"),(0,r.kt)(g.Z,{language:"bash",title:"Condensed expected output from the Tracetest container:",mdxType:"CodeBlock"},"Starting tracetest ...\n...\n2022/11/28 18:24:09 HTTP Server started\n...")),(0,r.kt)(b,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,r.kt)(g.Z,{language:"text",title:"Terminal",mdxType:"CodeBlock"},"How do you want to run TraceTest? [type to search]:\n  Using Docker Compose\n> Using Kubernetes"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Follow the prompts and continue with all the default settings.\nThis will deploy all resources to Kubernetes.\nTo see exactly what is deployed, view ",(0,r.kt)("a",{parentName:"p",href:"../deployment/kubernetes"},"the deployment instructions")," in the Deployment section of the docs.")),(0,r.kt)(g.Z,{language:"bash",title:"Condensed expected output from the Tracetest CLI:",mdxType:"CodeBlock"},'export POD_NAME=$(kubectl get pods --namespace demo -l "app.kubernetes.io/name=pokemon-api,app.kubernetes.io/instance=demo" -o jsonpath="{.items[0].metadata.name}")\nexport CONTAINER_PORT=$(kubectl get pod --namespace demo $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")\necho "Visit http://127.0.0.1:8080 to use your application"\nkubectl --namespace demo port-forward $POD_NAME 8080:$CONTAINER_PORT\nkubectl --kubeconfig <path-to-your-home>/.kube/config --context <your-cluster-context> --namespace tracetest port-forward svc/tracetest 11633'))),(0,r.kt)("p",null,"Open your browser on ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:11633"},(0,r.kt)("inlineCode",{parentName:"a"},"http://localhost:11633")),"."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("a",{parentName:"p",href:"/web-ui/creating-tests"},"test"),"."),(0,r.kt)("p",null,"Need more detailed information about how to install Tracetest? Read the detailed setup on the ",(0,r.kt)("a",{parentName:"p",href:"./detailed-installation"},"CLI installation page"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"View deployment instructions for Docker and Kubernetes in the ",(0,r.kt)("a",{parentName:"p",href:"../deployment/overview"},"Deployment section"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Running a test against ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," will resolve as ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," inside the Tracetest container. To run tests against apps running on your local machine, add them to the same network and use service name mapping instead. Example: Instead of running an app on ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:8080"),", add it to your Docker Compose file, connect it to the same network as your Tracetest service, and use ",(0,r.kt)("inlineCode",{parentName:"p"},"service-name:8080")," in the URL field when creating an app."),(0,r.kt)("p",{parentName:"admonition"},"You can reach services running on your local machine using:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Linux (docker version < 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"172.17.0.1:8080")),(0,r.kt)("li",{parentName:"ul"},"MacOS (docker version >= 18.03) and Linux (docker version >= 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"host.docker.internal:8080")))))}C.isMDXComponent=!0}}]);