"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9260],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var p=2;p<o;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},c="OpenSearch",i={unversionedId:"configuration/connecting-to-data-stores/opensearch",id:"configuration/connecting-to-data-stores/opensearch",title:"OpenSearch",description:"If you want to use OpenSearch as the trace data store, you can configure Tracetest to fetch trace data from OpenSearch.",source:"@site/docs/configuration/connecting-to-data-stores/opensearch.md",sourceDirName:"configuration/connecting-to-data-stores",slug:"/configuration/connecting-to-data-stores/opensearch",permalink:"/configuration/connecting-to-data-stores/opensearch",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/connecting-to-data-stores/opensearch.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jaeger",permalink:"/configuration/connecting-to-data-stores/jaeger"},next:{title:"Elastic APM",permalink:"/configuration/connecting-to-data-stores/elasticapm"}},s={},p=[{value:"Configure OpenTelemetry Collector to Send Traces to OpenSearch",id:"configure-opentelemetry-collector-to-send-traces-to-opensearch",level:2},{value:"Configure Tracetest to Use OpenSearch as a Trace Data Store",id:"configure-tracetest-to-use-opensearch-as-a-trace-data-store",level:2},{value:"Web UI",id:"web-ui",level:3},{value:"CLI",id:"cli",level:3}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"opensearch"},"OpenSearch"),(0,a.kt)("p",null,"If you want to use OpenSearch as the trace data store, you can configure Tracetest to fetch trace data from OpenSearch."),(0,a.kt)("p",null,"You'll configure the OpenTelemetry Collector to receive traces from your system and then send them to OpenSearch via Data Prepper. And, you don't have to change your existing pipelines to do so."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Examples of configuring Tracetest can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},(0,a.kt)("inlineCode",{parentName:"a"},"examples")," folder of the Tracetest GitHub repo"),". ")),(0,a.kt)("h2",{id:"configure-opentelemetry-collector-to-send-traces-to-opensearch"},"Configure OpenTelemetry Collector to Send Traces to OpenSearch"),(0,a.kt)("p",null,"In your OpenTelemetry Collector config file, make sure to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"otlp"),", with the ",(0,a.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to the Data Prepper on port ",(0,a.kt)("inlineCode",{parentName:"p"},"21890"),". If you are running Tracetest with Docker, the endpoint might look like this ",(0,a.kt)("inlineCode",{parentName:"p"},"data-prepper:21890"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\n\n# If you already have receivers declared, you can just ignore\n# this one and use yours instead.\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/2:\n    endpoint: data-prepper:21890\n    tls:\n      insecure: true\n      insecure_skip_verify: true\n\nservice:\n  pipelines:\n    # You probably already have a traces pipeline, you don't have to change it.\n    # Just add this one to your configuration. Just make sure to not have two\n    # pipelines with the same name.\n    traces/1:\n      receivers: [otlp] # your receiver\n      processors: [batch] # make sure to add the batch processor\n      exporters: [otlp/2] # your exporter pointing to your Data Prepper instance\n\n")),(0,a.kt)("h2",{id:"configure-tracetest-to-use-opensearch-as-a-trace-data-store"},"Configure Tracetest to Use OpenSearch as a Trace Data Store"),(0,a.kt)("p",null,"You also have to configure your Tracetest instance to make it aware that it has to fetch trace data from OpenSearch. "),(0,a.kt)("p",null,"Make sure you know which Index name and Address you are using. In the screenshot below, the Index name is ",(0,a.kt)("inlineCode",{parentName:"p"},"traces"),", the Address is ",(0,a.kt)("inlineCode",{parentName:"p"},"http://opensearch:9200"),"."),(0,a.kt)("h3",{id:"web-ui"},"Web UI"),(0,a.kt)("p",null,"In the Web UI, open settings, and select OpenSearch."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1674644099/Blogposts/Docs/screely-1674644094600_svcwp6.png",alt:null})),(0,a.kt)("h3",{id:"cli"},"CLI"),(0,a.kt)("p",null,"Or, if you prefer using the CLI, you can use this file config."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: OpenSearch Data Store\n  type: openSearch\n  isDefault: true\n  opensearch:\n    addresses:\n      - http://opensearch:9200\n    index: traces\n")),(0,a.kt)("p",null,"Proceed to run this command in the terminal, and specify the file above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest datastore apply -f my/data-store/file/location.yaml\n")))}u.isMDXComponent=!0}}]);