"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(n),d=o,f=g["".concat(c,".").concat(d)]||g[d]||u[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={},i="SignalFx",s={unversionedId:"configuration/connecting-to-data-stores/signalfx",id:"configuration/connecting-to-data-stores/signalfx",title:"SignalFx",description:"If you want to use SignalFx as the trace data store, you can configure Tracetest to fetch trace data from SignalFx.",source:"@site/docs/configuration/connecting-to-data-stores/signalfx.md",sourceDirName:"configuration/connecting-to-data-stores",slug:"/configuration/connecting-to-data-stores/signalfx",permalink:"/configuration/connecting-to-data-stores/signalfx",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/connecting-to-data-stores/signalfx.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Elastic APM",permalink:"/configuration/connecting-to-data-stores/elasticapm"},next:{title:"Tempo",permalink:"/configuration/connecting-to-data-stores/tempo"}},c={},l=[{value:"Configure OpenTelemetry Collector to Send Traces to SignalFx",id:"configure-opentelemetry-collector-to-send-traces-to-signalfx",level:2},{value:"Configure Tracetest to use SignalFx as a Trace Data Store",id:"configure-tracetest-to-use-signalfx-as-a-trace-data-store",level:2},{value:"Web UI",id:"web-ui",level:3},{value:"CLI",id:"cli",level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"signalfx"},"SignalFx"),(0,o.kt)("p",null,"If you want to use SignalFx as the trace data store, you can configure Tracetest to fetch trace data from SignalFx."),(0,o.kt)("p",null,"You'll configure the OpenTelemetry Collector to receive traces from your system and then send them to SignalFx. And, you don't have to change your existing pipelines to do so."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Examples of configuring Tracetest can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},(0,o.kt)("inlineCode",{parentName:"a"},"examples")," folder of the Tracetest GitHub repo"),". ")),(0,o.kt)("h2",{id:"configure-opentelemetry-collector-to-send-traces-to-signalfx"},"Configure OpenTelemetry Collector to Send Traces to SignalFx"),(0,o.kt)("p",null,"In your OpenTelemetry Collector config file, make sure to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"sapm"),", with the ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to the SignalFx trace ingestion endpoint. The endpoint might look like this ",(0,o.kt)("inlineCode",{parentName:"p"},"https://ingest.us1.signalfx.com/v2/trace"),". Also make sure to add your SignalFx ",(0,o.kt)("inlineCode",{parentName:"p"},"access_token"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\n\n# If you already have receivers declared, you can just ignore\n# this one and use yours instead.\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  sapm:\n    access_token: <YOUR_TOKEN> # UPDATE THIS\n    access_token_passthrough: true\n    endpoint: https://ingest.us1.signalfx.com/v2/trace # UPDATE THIS IF NEEDED\n    max_connections: 100\n    num_workers: 8\n\nservice:\n  pipelines:\n    # your probably already have a traces pipeline, you don't have to change it.\n    # just add this one to your configuration. Just make sure to not have two\n    # pipelines with the same name\n    traces/1:\n      receivers: [otlp] # your receiver\n      processors: [batch] # make sure to add the batch processor\n      exporters: [sapm] # your exporter pointing to your SignalFx instance\n\n")),(0,o.kt)("h2",{id:"configure-tracetest-to-use-signalfx-as-a-trace-data-store"},"Configure Tracetest to use SignalFx as a Trace Data Store"),(0,o.kt)("p",null,"You also have to configure your Tracetest instance to make it aware that it has to fetch trace data from SignalFx."),(0,o.kt)("h3",{id:"web-ui"},"Web UI"),(0,o.kt)("p",null,"In the Web UI, open settings, and select SignalFx."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1674644337/Blogposts/Docs/screely-1674644332529_cks0lw.png",alt:null})),(0,o.kt)("h3",{id:"cli"},"CLI"),(0,o.kt)("p",null,"Or, if you prefer using the CLI, you can use this file config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: SignalFX\n  type: signalFx\n  isDefault: true\n  signalFx:\n    realm: us1\n    token: mytoken\n")),(0,o.kt)("p",null,"Proceed to run this command in the terminal, and specify the file above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest datastore apply -f my/data-store/file/location.yaml\n")))}u.isMDXComponent=!0}}]);