"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[6437],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},i="OpenTelemetry Collector",c={unversionedId:"configuration/connecting-to-data-stores/opentelemetry-collector",id:"configuration/connecting-to-data-stores/opentelemetry-collector",title:"OpenTelemetry Collector",description:"If you don't want to use a trace data store, you can send all traces directly to Tracetest using your OpenTelemetry Collector. And, you don't have to change your existing pipelines to do so.",source:"@site/docs/configuration/connecting-to-data-stores/opentelemetry-collector.md",sourceDirName:"configuration/connecting-to-data-stores",slug:"/configuration/connecting-to-data-stores/opentelemetry-collector",permalink:"/configuration/connecting-to-data-stores/opentelemetry-collector",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/connecting-to-data-stores/opentelemetry-collector.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration Overview",permalink:"/configuration/overview"},next:{title:"Jaeger",permalink:"/configuration/connecting-to-data-stores/jaeger"}},l={},s=[{value:"Configuring OpenTelemetry Collector to Send Traces to Tracetest",id:"configuring-opentelemetry-collector-to-send-traces-to-tracetest",level:2},{value:"Configure Tracetest",id:"configure-tracetest",level:3},{value:"Web UI",id:"web-ui",level:3},{value:"CLI",id:"cli",level:3}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"opentelemetry-collector"},"OpenTelemetry Collector"),(0,o.kt)("p",null,"If you don't want to use a trace data store, you can send all traces directly to Tracetest using your OpenTelemetry Collector. And, you don't have to change your existing pipelines to do so."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Examples of configuring Tracetest can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},(0,o.kt)("inlineCode",{parentName:"a"},"examples")," folder of the Tracetest GitHub repo"),". ")),(0,o.kt)("h2",{id:"configuring-opentelemetry-collector-to-send-traces-to-tracetest"},"Configuring OpenTelemetry Collector to Send Traces to Tracetest"),(0,o.kt)("p",null,"In your OpenTelemetry Collector config file, make sure to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"exporter")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"otlp/1"),", with the ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoint")," pointing to your Tracetest instance on port ",(0,o.kt)("inlineCode",{parentName:"p"},"21321"),". If you are running Tracetest with Docker, the endpoint might look like this ",(0,o.kt)("inlineCode",{parentName:"p"},"http://tracetest:21321"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\n\n# If you already have receivers declared, you can just ignore\n# this one and still use yours instead.\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  # This is the exporter that will send traces to Tracetest\n  otlp/1:\n    endpoint: http://your-tracetest-instance.com:21321\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    # your probably already have a traces pipeline, you don't have to change it.\n    # just add this one to your configuration. Just make sure to not have two\n    # pipelines with the same name\n    traces/1:\n      receivers: [otlp] # your receiver\n      processors: [batch]\n      exporters: [otlp/1] # your exporter pointing to your tracetest instance\n")),(0,o.kt)("h3",{id:"configure-tracetest"},"Configure Tracetest"),(0,o.kt)("p",null,"You also have to configure your Tracetest instance to expose an ",(0,o.kt)("inlineCode",{parentName:"p"},"otlp")," endpoint to make it aware it will receive traces from the OpenTelemetry Collector."),(0,o.kt)("h3",{id:"web-ui"},"Web UI"),(0,o.kt)("p",null,"In the Web UI, open settings, and select OpenTelemetry Collector."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1674644190/Blogposts/Docs/screely-1674644186486_pahrds.png",alt:null})),(0,o.kt)("h3",{id:"cli"},"CLI"),(0,o.kt)("p",null,"Or, if you prefer using the CLI, you can use this file config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Opentelemetry Collector pipeline\n  type: otlp\n  isDefault: true\n")),(0,o.kt)("p",null,"Proceed to run this command in the terminal, and specify the file above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest datastore apply -f my/data-store/file/location.yaml\n")))}u.isMDXComponent=!0}}]);